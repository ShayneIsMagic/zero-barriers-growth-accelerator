name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security checks weekly
    - cron: '0 2 * * 1'

env:
  NODE_VERSION: '18.17.0'
  PNPM_VERSION: '8.15.0'

jobs:
  # Quality Assurance
  quality:
    name: Quality Assurance
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Check code formatting
        run: npm run format:check

      - name: Type checking
        run: npm run type-check

      - name: Run unit tests
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          args: --only-verified --format json
          path: ./
          out: trufflehog-results.json

      - name: Upload TruffleHog results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: trufflehog-results
          path: trufflehog-results.json

  # Performance Testing
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:3000
          uploadArtifacts: true
          temporaryPublicStorage: true
          configPath: './.lighthouserc.json'

      - name: Run bundle analysis
        run: npm run build:analyze

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v3
        with:
          name: bundle-analysis
          path: .next/analyze/

  # End-to-End Testing
  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm start &
        env:
          NODE_ENV: test

      - name: Wait for application
        run: npx wait-on http://localhost:3000

      - name: Run E2E tests
        run: npm run e2e

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Load Testing
  load-test:
    name: Load Testing
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Artillery
        run: npm install -g artillery

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm start &
        env:
          NODE_ENV: test

      - name: Wait for application
        run: npx wait-on http://localhost:3000

      - name: Run load tests
        run: artillery run load-test.yml --output load-test-results.json

      - name: Upload load test results
        uses: actions/upload-artifact@v3
        with:
          name: load-test-results
          path: load-test-results.json

  # Database Testing
  database:
    name: Database Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> .env.test
          echo "DIRECT_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> .env.test

      - name: Generate Prisma client
        run: npm run db:generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: Run database migrations
        run: npm run db:push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: Run database tests
        run: npm run test -- --run --reporter=verbose
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

  # Code Quality Metrics
  metrics:
    name: Code Quality Metrics
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run complexity analysis
        run: npx complexity-report src/ --format json > complexity-report.json

      - name: Upload complexity report
        uses: actions/upload-artifact@v3
        with:
          name: complexity-report
          path: complexity-report.json

      - name: Check bundle size
        run: npm run build
        env:
          ANALYZE: true

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v3
        with:
          name: bundle-analysis
          path: .next/analyze/

  # Deployment (Main branch only)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality, security, performance, e2e, load-test, database]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

  # Quality Gate Summary
  quality-gate:
    name: Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [quality, security, performance, e2e, load-test, database]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate quality report
        run: |
          echo "## ðŸš€ Quality Gate Results" >> quality-report.md
          echo "" >> quality-report.md
          echo "### âœ… Passed Checks:" >> quality-report.md
          echo "- Code Quality: ${{ needs.quality.result }}" >> quality-report.md
          echo "- Security: ${{ needs.security.result }}" >> quality-report.md
          echo "- Performance: ${{ needs.performance.result }}" >> quality-report.md
          echo "- E2E Tests: ${{ needs.e2e.result }}" >> quality-report.md
          echo "- Load Tests: ${{ needs.load-test.result }}" >> quality-report.md
          echo "- Database: ${{ needs.database.result }}" >> quality-report.md
          echo "" >> quality-report.md
          echo "### ðŸ“Š Summary:" >> quality-report.md
          echo "- Total Jobs: 6" >> quality-report.md
          echo "- Passed: ${{ (needs.quality.result == 'success' && needs.security.result == 'success' && needs.performance.result == 'success' && needs.e2e.result == 'success' && needs.load-test.result == 'success' && needs.database.result == 'success') && '6' || '0' }}" >> quality-report.md
          echo "- Failed: ${{ (needs.quality.result != 'success' || needs.security.result != 'success' || needs.performance.result != 'success' || needs.e2e.result != 'success' || needs.load-test.result != 'success' || needs.database.result != 'success') && '6' || '0' }}" >> quality-report.md

      - name: Upload quality report
        uses: actions/upload-artifact@v3
        with:
          name: quality-report
          path: quality-report.md

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('quality-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
