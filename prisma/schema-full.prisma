// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  organizationId String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions     Session[]
  analyses     Analysis[]
  organizations Organization[] @relation("OrganizationMembers")
  organization  Organization?  @relation("OrganizationOwner")

  @@index([email])
  @@index([organizationId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  logo        String?
  website     String?
  industry    String?
  size        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner       User     @relation("OrganizationOwner", fields: [ownerId], references: [id])
  ownerId     String   @unique
  members     User[]   @relation("OrganizationMembers")
  analyses    Analysis[]
  projects    Project[]

  @@index([slug])
  @@index([industry])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  analyses      Analysis[]

  @@index([organizationId])
  @@index([status])
}

model Analysis {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String   @db.Text
  contentType ContentType
  status      AnalysisStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user           User    @relation(fields: [userId], references: [id])
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  project        Project? @relation(fields: [projectId], references: [id])
  projectId      String?

  // Analysis Results
  goldenCircleScore GoldenCircleScore?
  consumerValueScore ConsumerValueScore?
  b2bValueScore B2BValueScore?
  cliftonStrengthsScore CliftonStrengthsScore?
  
  // AI Processing
  aiAnalysis     AIAnalysis?
  recommendations Recommendation[]
  barriers       Barrier[]
  
  // Metadata
  tags           String[]
  industry       String?
  targetAudience String?
  conversionGoal String?

  @@index([userId])
  @@index([organizationId])
  @@index([projectId])
  @@index([status])
  @@index([contentType])
  @@index([createdAt])
}

model GoldenCircleScore {
  id          String   @id @default(cuid())
  analysisId  String   @unique
  analysis    Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  
  whyScore    Float
  howScore    Float
  whatScore   Float
  overallScore Float
  
  whyDetails  Json
  howDetails  Json
  whatDetails Json
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ConsumerValueScore {
  id          String   @id @default(cuid())
  analysisId  String   @unique
  analysis    Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  
  functionalScore Float
  emotionalScore  Float
  lifeChangingScore Float
  socialImpactScore Float
  overallScore     Float
  
  elementScores    Json
  topElements      String[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model B2BValueScore {
  id          String   @id @default(cuid())
  analysisId  String   @unique
  analysis    Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  
  tableStakesScore Float
  functionalScore  Float
  easeOfBusinessScore Float
  individualScore     Float
  inspirationalScore  Float
  overallScore        Float
  
  elementScores       Json
  topElements         String[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CliftonStrengthsScore {
  id          String   @id @default(cuid())
  analysisId  String   @unique
  analysis    Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  
  executingScore      Float
  influencingScore    Float
  relationshipBuildingScore Float
  strategicThinkingScore    Float
  overallScore              Float
  
  themeScores        Json
  topThemes          String[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AIAnalysis {
  id          String   @id @default(cuid())
  analysisId  String   @unique
  analysis    Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  
  model       String
  prompt      String   @db.Text
  response    Json
  tokensUsed  Int
  processingTime Float
  confidence  Float
  
  createdAt   DateTime @default(now())
}

model Recommendation {
  id          String   @id @default(cuid())
  analysisId  String
  analysis    Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  
  title       String
  description String   @db.Text
  category    String
  priority    Priority @default(MEDIUM)
  impact      String
  effort      String
  timeframe   String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([analysisId])
  @@index([category])
  @@index([priority])
}

model Barrier {
  id          String   @id @default(cuid())
  analysisId  String
  analysis    Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  
  name        String
  description String   @db.Text
  category    String
  severity    Severity @default(MEDIUM)
  impact      String
  solution    String   @db.Text
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([analysisId])
  @@index([category])
  @@index([severity])
}

// Enums
enum UserRole {
  SUPER_ADMIN
  ADMIN
  C_SUITE
  PRODUCER
  USER
}

enum ProjectStatus {
  ACTIVE
  PAUSED
  COMPLETED
  ARCHIVED
}

enum ContentType {
  WEBSITE_COPY
  MARKETING_COPY
  SOCIAL_MEDIA
  EMAIL_SEQUENCE
  LANDING_PAGE
  AD_COPY
  PRODUCT_DESCRIPTION
  COMPANY_OVERVIEW
  OTHER
}

enum AnalysisStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
